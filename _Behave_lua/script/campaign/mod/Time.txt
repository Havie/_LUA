local function get_date_from_unix(unix_time)
    local day_count, year, days, month = function(yr) return (yr % 4 == 0 and (yr % 100 ~= 0 or yr % 400 == 0)) and 366 or 365 end, 1970, math.ceil(unix_time/86400)

    while days >= day_count(year) do
        days = days - day_count(year) year = year + 1
    end
    local tab_overflow = function(seed, table) for i = 1, #table do if seed - table[i] <= 0 then return i, seed end seed = seed - table[i] end end
    month, days = tab_overflow(days, {31,(day_count(year) == 366 and 29 or 28),31,30,31,30,31,31,30,31,30,31})
    local hours, minutes, seconds = math.floor(unix_time / 3600 % 24), math.floor(unix_time / 60 % 60), math.floor(unix_time % 60)
    local period = hours > 12 and "pm" or "am"
    hours = hours > 12 and hours - 12 or hours == 0 and 12 or hours
    return string.format("%d/%d/%04d %02d:%02d:%02d %s", days, month, year, hours, minutes, seconds, period)
end


local myTimeStamp = os.time({year=2001, month=9, day=11, hour=13, minute=46})

local time = get_date_from_unix(myTimeStamp )

print(tostring(myTimeStamp))
print(tostring(time ))


--try 
os.clock() -- for miliseconds

--Works
temp = os.date("*t", 906000490)
now = os.date("*t") -- get rid of that old string of numbers 

print("["..tostring(temp.min)..":"..tostring(temp.sec).."]")
print("["..tostring(temp.min)..":"..tostring(temp.sec)..tostring(os.clock()).."]")

    local x = os.clock()
    local s = 0
    for i=1,100054600 do s = s + i end
    print(string.format("elapsed time: %.2f\n", os.clock() - x))

	
	
	
now = os.date("*t") -- defaults to current date and time
nowutc = os.time(now)
print ("It is now "..nowutc.. " which works out as")
for n,v in pairs(now) do
        print (n,v)
end
